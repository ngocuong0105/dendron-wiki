{"pageProps":{"note":{"id":"x0cxhdz6m217jsrqw2pcwuk","title":"Python tricks","desc":"","updated":1752082145773,"created":1664446506779,"custom":{},"fname":"engineering.algorithms.Python tricks","type":"note","vault":{"fsPath":"vault"},"contentHash":"535092cc1e92849fd8d4068392aed9b9","links":[],"anchors":{},"children":[],"parent":"7m3gais9ll8mlmzqlw08s7g","data":{}},"body":"<h1 id=\"python-tricks\">Python tricks<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#python-tricks\"></a></h1>\n<ul>\n<li>transpose of a matrix</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># transpose with unzipping</span>\nmat <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ntranspose_mat <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>mat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>one star unpacks arguments</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\">function<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nargs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nfunc<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span> <span class=\"token comment\">#much nicer than</span>\nfunc<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>two stars is for key worded arguments and is for maps</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\">function<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># keys are the arguments and values are the argument values</span>\n</code></pre>\n<ul>\n<li>cumulative sum,min,max,xor,gcd. Note sum and xor are semi-rings on <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span></span> (that is they have minus) - you can query subarrays in <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>.</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># cumulative sum array, cdf</span>\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> accumulate\nnums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\ncum <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>accumulate<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>func <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1,3,6,10]</span>\n</code></pre>\n<ul>\n<li>xor cumulative</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\">xor_cum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>accumulate<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">^</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''returns xor subarray arr[l]^arr[l+1]^...^arr[r]'''</span>\n    xor_cum<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>xor_cum<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span>\n</code></pre>\n<ul>\n<li>flatten list with chain</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># flatten list</span>\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> chain\nequations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>equations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<ul>\n<li>adjacency list</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\nadj <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># default dict takes a function</span>\n<span class=\"token keyword\">for</span> u<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n    adf<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<ul>\n<li>Counter</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># Counter dict</span>\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nc <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># returns tuple of all elements and counts in sorted order</span>\n</code></pre>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># count occurrences of element in list</span>\nls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nls<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li><a href=\"https://leetcode.com/problems/toeplitz-matrix/\">Toeplitz Matrix</a>, diagonals have constant values</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isToeplitzMatrix</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isToeplitzMatrix</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> m<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>j <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isToeplitzMatrix</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> r2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> r1<span class=\"token punctuation\">,</span>r2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<ul>\n<li>check if two intervals overlap</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># [a,b], [x,y]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">overlap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">&#x3C;</span> y <span class=\"token keyword\">and</span> x <span class=\"token operator\">&#x3C;</span> b\n</code></pre>\n<ul>\n<li>max with key, array of arrays, return array of max length</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># gives array of maximul length</span>\n</code></pre>\n<ul>\n<li>custom comparator in sorting, sorted(), sort, key, compare</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cmp_to_key\n<span class=\"token keyword\">def</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n \ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>\n<p>python does not have tail <a href=\"https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion\">recursion</a> (unlike Lisp)</p>\n</li>\n<li>\n<p>get groups, groupby</p>\n</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> groupby\ns <span class=\"token operator\">=</span> <span class=\"token string\">'aaabbddca'</span>\ngroups <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> ch<span class=\"token punctuation\">,</span>g <span class=\"token keyword\">in</span> groupby<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># [(a,3),(b,2),(d,2),(c,1),(a,1)]</span>\n</code></pre>\n<ul>\n<li>concurrent, multithreaded programming, <a href=\"https://leetcode.com/problems/web-crawler-multithreaded/\">web crawler</a></li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># simple DFS</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">crawl</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> parser<span class=\"token punctuation\">:</span> <span class=\"token string\">'HtmlParser'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hostname <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        visited<span class=\"token punctuation\">,</span>stack<span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n            s <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> u <span class=\"token keyword\">in</span> parser<span class=\"token punctuation\">.</span>getUrls<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> u <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited <span class=\"token keyword\">and</span> hostname<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> hostname<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    visited<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n                    stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> visited\n\n<span class=\"token comment\"># concurrent DFS</span>\n<span class=\"token keyword\">from</span> concurrent <span class=\"token keyword\">import</span> futures\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">crawl</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> parser<span class=\"token punctuation\">:</span> <span class=\"token string\">'HtmlParser'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hostname <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> futures<span class=\"token punctuation\">.</span>ThreadPoolExecutor<span class=\"token punctuation\">(</span>max_workers<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> executor<span class=\"token punctuation\">:</span>\n            tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>executor<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>getUrls<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">while</span> tasks<span class=\"token punctuation\">:</span>\n                neigh <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> u <span class=\"token keyword\">in</span> neigh<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> u <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited <span class=\"token keyword\">and</span> hostname<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> hostname<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        visited<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n                        tasks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>getUrls<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> visited\n</code></pre>\n<ul>\n<li>string operations/methods</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\">char<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nchar<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nchar<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nchar<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nch<span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># is an integer</span>\nch<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># is a character</span>\n</code></pre>\n<ul>\n<li>permutations</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> permutations\nnums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> permutations<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>is a string a rotated version of another string, is rotate</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Consider a string S=\"helloworld\". Now, given another string T=\"lloworldhe\", can we figure out if T is a rotated version of S? Yes, we can! We check if S is a substring of T+T.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_rotate</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> s <span class=\"token keyword\">in</span> t<span class=\"token operator\">+</span>t\n</code></pre>\n<ul>\n<li>traverse squares quickly. If <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>∗</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x = a*a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span> then <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>5...</mn></mrow><annotation encoding=\"application/x-tex\">x = 1+3+5...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5...</span></span></span></span></span></li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\">x<span class=\"token punctuation\">,</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">+=</span> n\n    n <span class=\"token operator\">+=</span> <span class=\"token number\">2</span>\n</code></pre>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/12764670/are-there-any-bitwise-operator-laws\">Binary operations laws</a></p>\n</li>\n<li>\n<p>Distributive of AND over XOR</p>\n</li>\n</ul>\n<pre><code>a &#x26; (b1 ^ b2) = (a &#x26; b1) ^ (a &#x26; b2)\n</code></pre>\n<ul>\n<li>bitwise tricks, binary operations</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    This is a class for basic manipulation methods for bits.\n    Arguments: Integer in base 10\n    Returns:\n    binary representation;\n    get, set, clear, update specific bits;\n    count number of bits;\n    least significant bit;\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">=</span> num\n\n    <span class=\"token comment\"># binary representation</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decimal\n        <span class=\"token keyword\">while</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            num <span class=\"token operator\">//=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>decimal<span class=\"token punctuation\">}</span></span><span class=\"token string\"> has binary representation </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decimal\n        <span class=\"token keyword\">while</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            num <span class=\"token operator\">//=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># get bit</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        msk <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> i\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">&#x26;</span> msk <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\"># set bit</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        msk <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> i\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">|</span> msk\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>decimal\n\n    <span class=\"token comment\"># clear specific bit i</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        msk <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ~ reverses bits, 0 -> 1 and 1 -> 0</span>\n        self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">&#x26;</span> msk\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>decimal\n\n    <span class=\"token comment\"># clear all bits from beginning to bit i</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clearFirstBits</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        msk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">&#x26;</span> msk\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>decimal\n\n    <span class=\"token comment\"># clear all bits from end to bit i</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clearEndBits</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        msk <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># note -1 is 11111..1</span>\n        self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">&#x26;</span> msk\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>decimal\n\n    <span class=\"token comment\"># update bit i to value val</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        msk <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&#x3C;&#x3C;</span> i<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">&#x26;</span> msk\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>decimal\n\n    <span class=\"token comment\"># returns number of bits</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># res+=self.decimal%2</span>\n            res <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">&#x26;</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">>></span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res\n\n    <span class=\"token comment\"># least significant bit</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lsb</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># negative numbers are represented as two's complement</span>\n        <span class=\"token comment\"># two's complement = one's complement + 1</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>decimal <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>decimal\n</code></pre>\n<ul>\n<li>print + assignment</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>window multiply</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">window_multiply</span><span class=\"token punctuation\">(</span>filter_window<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Example:filter_window = np.array([1,2,3]),  target = np.array([4,5,6,7,8,9,10]), \n    out = [\n        [ 4, 10, 18],\n        [ 5, 12, 21],\n        [ 6, 14, 24],\n        [ 7, 16, 27],\n        [ 8, 18, 30]\n        ]\n    out[0] = [1*4, 2*5, 3*6] = [4, 10, 18]\n    out[1] = [1*5, 2*6, 3*7] = [5, 12, 21]\n    etc.\n    \"\"\"</span>\n    w <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>filter_window<span class=\"token punctuation\">)</span>\n    indices <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n    out <span class=\"token operator\">=</span> filter_window <span class=\"token operator\">*</span> target<span class=\"token punctuation\">[</span>indices<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> out\n\n</code></pre>\n<ul>\n<li>itertools.groupby()</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'aaabbcddd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># a, [a,a,a]</span>\n\ngroups <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> groupby<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    groups<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li><a href=\"https://math.stackexchange.com/questions/2592324/how-to-do-a-modular-arithmetic-with-negative-exponents\">negative power modulus</a>. You can use it as of Python 3.8. Useful for solving linear Diophantine equality. First and third argument need to be coprime.</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>binary to decimal</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'101'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>careful with instantiation and constructor</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">,</span>children<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children\n\na <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token comment\"># prints [12]</span>\n<span class=\"token comment\"># modification on object a modifies b too, children is a class variable... if not set</span>\n</code></pre>\n<ul>\n<li>swapcase(), string, uppercase, lowercase swap</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token string\">'aA'</span><span class=\"token punctuation\">.</span>swapcase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># gives 'Aa'</span>\n</code></pre>\n<ul>\n<li>(dangerous default values)[https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments]</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">append_to</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> to<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># mutable default arguments</span>\n    to<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> to\n\nmy_list <span class=\"token operator\">=</span> append_to<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span>\n\nmy_other_list <span class=\"token operator\">=</span> append_to<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_other_list<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># What you want:</span>\n<span class=\"token comment\"># [12]</span>\n<span class=\"token comment\"># [42]</span>\n\n<span class=\"token comment\"># What actually happens:</span>\n<span class=\"token comment\"># [12]</span>\n<span class=\"token comment\"># [12, 42]</span>\n</code></pre>\n<ul>\n<li>key, custom bisect bisect_left</li>\n</ul>\n<pre><code>def poss:\n    \"\"\" returns True/False\"\"\nbisect.bisect_left(range(n), x=True, key=poss)\n\n# equivalent to\ndef bs(nums=range(n)):\n    l,r = 0,n\n    while l&#x3C;r:\n        m =l+r>>1\n        if poss(m):\n            r = m\n        else:\n            l = m+1\n    return l\n</code></pre>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/62975325/why-is-summing-list-comprehension-faster-than-generator-expression\">generators are slower than list comprehension</a></li>\n</ul>\n<p>-check common characters in two strings A and B</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ch <span class=\"token keyword\">in</span> A <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># fast</span>\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">in</span> A <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> B<span class=\"token punctuation\">)</span> <span class=\"token comment\"># slow</span>\n</code></pre>\n<ul>\n<li>check if t is a subsequence of s using iterator trick</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_subsequence</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    it <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">in</span> it <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> t<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># return all(ch in iter(t) for ch in s) fails, creates a new instance of iter(t) every time </span>\n</code></pre>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1744237493819,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"ea936af1aea818f3052610daac103a63","links":[],"anchors":{},"children":["dgcsvcwea8scgdegrk9tfni","xig93vo47ou1bkr7s4w1wb2","ro9bbyftsutm88mxw6r16p5","ypia1zmywsklpicmcgrzlz1","w7iitlako61ppm27mym400a","6bx5plramu4hksomqc1n55z","4nki3bedlvs3mnkixj3a07k","9r5ym61dkwap92fvbte1jkq","849u97nrsuyekmr4a1r92ux","2b5bwf46z6v132wu7xghvrp","dygp5h2vzw4mkromwmofynb","7h50s7ga5ziiyblmoctsqmw","pglaolxcge4xfvgoph3je89","uy9u1co5ih1fokind8tg0eq","jc23ggp8iiu92kpnzo721to","f1u2a47guuw70olv36bzf66","c1bs7wsjfbhb0zipaywqv1","2av385tcj2cbumxprsauff3","v77wdzobzcackzimz6a7crv"],"parent":null,"data":{},"body":"\nWelcome to my Knowledge Base! Here I write about my perception of life, document exciting things I've learned, debate (with myself) on controversial topics. If you know me you will not be surprised to find out that I write mostly about engineering and maths. Other topics I'm interested in are economics, politics, business, chess and poker."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/dendron-wiki","siteUrl":"https://ngocuong0105.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","ga":{"tracking":"G-W5DRRLQ1N7"},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}