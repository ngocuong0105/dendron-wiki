{"pageProps":{"note":{"id":"kqytwsfc4ah79athz7a838k","title":"Lazy Compute","desc":"","updated":1752649788329,"created":1752649787082,"custom":{},"fname":"engineering.Concepts.Lazy Compute","type":"note","vault":{"fsPath":"vault"},"contentHash":"60f6956001a340b176ee2fc179a25abd","links":[],"anchors":{"polars-lazy-api":{"type":"header","text":"Polars lazy API","value":"polars-lazy-api","line":9,"column":0,"depth":1}},"children":[],"parent":"7khpigcji0ufpuptuqozcft","data":{}},"body":"<h1 id=\"lazy-compute\">Lazy Compute<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lazy-compute\"></a></h1>\n<h1 id=\"polars-lazy-api\">Polars lazy API<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#polars-lazy-api\"></a></h1>\n<p>Write query plan first and run only when needed, i.e. collect()</p>\n<p>the lazy API:</p>\n<ul>\n<li>has query optimizations like in (SQL). You tell it what to do not how to do it so it arranges the queries is the most optimal way</li>\n<li>allows to work with larger than memory datasets using streaming</li>\n<li><a href=\"https://docs.pola.rs/user-guide/lazy/optimizations/\">list of optimizations</a> - all is related to optimal query planning</li>\n<li>schema plays important role. The lazy API does type checking before running all expensive queries!</li>\n<li>This Polars query optimizer MUST be able to infer the schema at every step of the query plan (hence .pivot() operation is not available - creates columns from values coming in one column). The optimizer does not know in advance these column names</li>\n<li>visualize optimizations using <code>.show_graph()</code> read from bottom to top. sigma is (filtering rows), pi is projection (filtering columns) -> here you will see how polars does predicate pushdown and projection pushdown</li>\n<li>Remember that LazyFrames are query plans i.e. a promise on computation and is not guaranteed to cache common subplans.</li>\n<li>sinks - saving data to disk without the need to load the whole dataset in memory. Process data in batches/chunks. I.e. we are streaming the results to storage</li>\n</ul>\n<p><strong>Tricks</strong></p>\n<p><code>pl.scan_csv</code> or <code>pl.scan_parquet</code></p>\n<ul>\n<li>read files larger than memory</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># With the default collect method Polars processes all of your data as one batch. This means that all the data has to fit into your available memory at the point of peak memory usage in your query.</span>\n<span class=\"token comment\"># So do: </span>\n<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span>engine<span class=\"token operator\">=</span><span class=\"token string\">'streaming'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># to read datasets thar are larger than memory</span>\n</code></pre>\n<ul>\n<li>Sink</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sink = streaming data to storage - saving in batches</span>\nlf <span class=\"token operator\">=</span> scan_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"my_dataset/*.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>is_not_null<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlf<span class=\"token punctuation\">.</span>sink_parquet<span class=\"token punctuation\">(</span>\n    pl<span class=\"token punctuation\">.</span>PartitionMaxSize<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"my_table_{part}.parquet\"</span>\n        max_size<span class=\"token operator\">=</span><span class=\"token number\">512_000</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># creates</span>\n<span class=\"token comment\"># my_table_0.parquet</span>\n<span class=\"token comment\"># my_table_1.parquet</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># my_table_n.parquet</span>\n</code></pre>\n<ul>\n<li>diverging queries (kind of caching..)</li>\n<li><a href=\"https://docs.pola.rs/user-guide/lazy/multiplexing/\">Multiplexing queries</a>! (also group_by does not guarantee order)</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Some expensive LazyFrame</span>\nlf<span class=\"token punctuation\">:</span> LazyFrame\n\nlf_1 <span class=\"token operator\">=</span> LazyFrame<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nlf_2 <span class=\"token operator\">=</span> lf<span class=\"token punctuation\">.</span>some_other_computation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npl<span class=\"token punctuation\">.</span>collect_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>lf_1<span class=\"token punctuation\">,</span> lf_2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># this will execute lf only once!</span>\n</code></pre>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1744237493819,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"ea936af1aea818f3052610daac103a63","links":[],"anchors":{},"children":["dgcsvcwea8scgdegrk9tfni","xig93vo47ou1bkr7s4w1wb2","ro9bbyftsutm88mxw6r16p5","ypia1zmywsklpicmcgrzlz1","w7iitlako61ppm27mym400a","6bx5plramu4hksomqc1n55z","4nki3bedlvs3mnkixj3a07k","9r5ym61dkwap92fvbte1jkq","849u97nrsuyekmr4a1r92ux","2b5bwf46z6v132wu7xghvrp","dygp5h2vzw4mkromwmofynb","7h50s7ga5ziiyblmoctsqmw","pglaolxcge4xfvgoph3je89","uy9u1co5ih1fokind8tg0eq","jc23ggp8iiu92kpnzo721to","f1u2a47guuw70olv36bzf66","c1bs7wsjfbhb0zipaywqv1","2av385tcj2cbumxprsauff3","v77wdzobzcackzimz6a7crv"],"parent":null,"data":{},"body":"\nWelcome to my Knowledge Base! Here I write about my perception of life, document exciting things I've learned, debate (with myself) on controversial topics. If you know me you will not be surprised to find out that I write mostly about engineering and maths. Other topics I'm interested in are economics, politics, business, chess and poker."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/dendron-wiki","siteUrl":"https://ngocuong0105.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","ga":{"tracking":"G-W5DRRLQ1N7"},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}