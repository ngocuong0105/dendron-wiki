{"pageProps":{"note":{"id":"37ghcmfqsbumla66qt9qh4y","title":"System Design","desc":"","updated":1751984689559,"created":1658698150589,"custom":{},"fname":"interviews.System Design","type":"note","vault":{"fsPath":"vault"},"contentHash":"56d3f5be86fc59b529be0d84a01bcdc1","links":[{"type":"wiki","from":{"fname":"interviews.System Design","id":"37ghcmfqsbumla66qt9qh4y","vaultName":"vault"},"value":"user.cache","alias":"@cache","position":{"start":{"line":117,"column":632,"offset":6303},"end":{"line":117,"column":638,"offset":6309},"indent":[]},"xvault":false,"to":{"fname":"user.cache"}},{"type":"wiki","from":{"fname":"interviews.System Design","id":"37ghcmfqsbumla66qt9qh4y","vaultName":"vault"},"value":"user.cache","alias":"@cache","position":{"start":{"line":142,"column":18,"offset":8404},"end":{"line":142,"column":24,"offset":8410},"indent":[]},"xvault":false,"to":{"fname":"user.cache"}},{"from":{"fname":"interviews.All interview stages","id":"82lxbmwgtrgestyejv1wg2j","vaultName":"vault"},"type":"backlink","position":{"start":{"line":8,"column":22,"offset":578},"end":{"line":8,"column":50,"offset":606},"indent":[]},"value":"interviews.System Design"}],"anchors":{"resources":{"type":"header","text":"Resources","value":"resources","line":7,"column":0,"depth":1},"general-tips":{"type":"header","text":"General tips","value":"general-tips","line":106,"column":0,"depth":2},"horizontal-scaling-improvements":{"type":"header","text":"Horizontal scaling improvements","value":"horizontal-scaling-improvements","line":113,"column":0,"depth":2},"buzz-words":{"type":"header","text":"Buzz words","value":"buzz-words","line":122,"column":0,"depth":2},"youtube":{"type":"header","text":"Youtube","value":"youtube","line":125,"column":0,"depth":1},"databases":{"type":"header","text":"Databases","value":"databases","line":195,"column":0,"depth":1},"differences-between-sql-and-nosql":{"type":"header","text":"Differences between SQL and NoSQL","value":"differences-between-sql-and-nosql","line":197,"column":0,"depth":2},"storage":{"type":"header","text":"Storage","value":"storage","line":198,"column":0,"depth":3},"schema":{"type":"header","text":"Schema","value":"schema","line":202,"column":0,"depth":3},"querying":{"type":"header","text":"Querying","value":"querying","line":209,"column":0,"depth":3},"scalability":{"type":"header","text":"Scalability","value":"scalability","line":217,"column":0,"depth":3},"acid":{"type":"header","text":"ACID","value":"acid","line":224,"column":0,"depth":3},"which-one-to-use":{"type":"header","text":"Which one to use?","value":"which-one-to-use","line":233,"column":0,"depth":2},"sql":{"type":"header","text":"SQL","value":"sql","line":234,"column":0,"depth":3},"nosql":{"type":"header","text":"NoSQL","value":"nosql","line":240,"column":0,"depth":3},"common-types-of-nosql":{"type":"header","text":"Common types of NoSQL","value":"common-types-of-nosql","line":268,"column":0,"depth":2},"key-value-stores":{"type":"header","text":"Key-value stores","value":"key-value-stores","line":269,"column":0,"depth":3},"document-databases":{"type":"header","text":"Document databases","value":"document-databases","line":273,"column":0,"depth":3},"wide-column--columnar-databases":{"type":"header","text":"Wide-column / columnar databases","value":"wide-column--columnar-databases","line":279,"column":0,"depth":3},"graph-database":{"type":"header","text":"Graph database","value":"graph-database","line":285,"column":0,"depth":3},"system-design-interview---an-insider-guide":{"type":"header","text":"System Design Interview - An Insider Guide","value":"system-design-interview---an-insider-guide","line":293,"column":0,"depth":1},"chapter-1---scale-from-zero-to-million-users":{"type":"header","text":"Chapter 1 - Scale from zero to million users","value":"chapter-1---scale-from-zero-to-million-users","line":295,"column":0,"depth":2}},"children":[],"parent":"9r5ym61dkwap92fvbte1jkq","data":{}},"body":"<h1 id=\"system-design\">System Design<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#system-design\"></a></h1>\n<h1 id=\"resources\">Resources<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resources\"></a></h1>\n<ul>\n<li><a href=\"https://github.com/mukul96/System-Design-AlexXu/blob/master/System%20Design%20Interview%20An%20Insider%E2%80%99s%20Guide%20by%20Alex%20Xu%20(z-lib.org).pdf\">System Design Interview An Insiderâ€™s Guide by Alex Xu </a></li>\n<li><a href=\"https://imaginary-basket-cbb.notion.site/System-Design-Interview-By-Alex-Xu-Book-Summary-17d97a868610804dbaf7e81fa7582caa\">Notes on Alex Xu Book</a></li>\n<li><a href=\"https://github.com/donnemartin/system-design-primer\">System Design Primer</a></li>\n<li><a href=\"https://github.com/Jeevan-kumar-Raj/Grokking-System-Design\">Grokking the System Design Interview github notes</a></li>\n<li>drawing tool <a href=\"https://excalidraw.com/\">escalidraw</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=WV2Ed1QTst8\">TechLead overview</a></li>\n<li><a href=\"https://www.systemdesignacademy.com/\">Blog on System Design topics</a>, one of its articles was liked by William (IMO best competitor)</li>\n</ul>\n<p><em>Strategy prep</em></p>\n<ul>\n<li>read this notes</li>\n<li>Anki notes and questions (you have an app)</li>\n<li>System Design Primer github repo</li>\n<li>System Design Interview insider book</li>\n</ul>\n<p><em>Tackle the problem by doing it just like you would at work.</em></p>\n<p>A 4-step process for effective system design interview:</p>\n<p><strong>1. Understand the problem and establish design scope</strong></p>\n<p>Goal: Gather requirements and clarify assumptions. WRITE THEM DOWN.\nNever start start designing before understanding <strong>requirements</strong>.</p>\n<p>Example questions: Product question -> technical question</p>\n<pre><code>DESIGN QUESTIONS\n</code></pre>\n<p><strong>Feature/Functional requirements</strong></p>\n<ul>\n<li>What are the required features for the system? -> Main <strong>functionalities</strong>?</li>\n<li>Who are my clients (external, internal, quants, mobile, web, international)?</li>\n<li>How are they going to use it? -> What <strong>services</strong> clients want to run? (determine API-s functions)</li>\n<li>Have we built this service before, or I am building it for the first time?</li>\n<li>What do we want to optimize with our design -> Determine logging metrics</li>\n</ul>\n<p><strong>Non-functional requirements</strong></p>\n<ul>\n<li>How many users are there? -> Horizontal vs Vertical Scalability</li>\n<li>Whats the traffic volume, DAU? -> Single Server setup or MultiServer Setup?</li>\n<li>Internal or External or Global system? -> Do we need high availability?</li>\n<li>Available or Consistent data storage? -> Determine tradeoff in CAP theorem</li>\n<li>How fast do we want to answer requests? -> Latency vs Consistency?</li>\n<li>How many requests per second do we expect?</li>\n<li>What is the scale of the system? Is it built for a startup or a big company with a large user base? -> Scalability?</li>\n<li>Scale of the system such as requests per second (<strong>RPS</strong>), requests types, data written per second, data read per second)</li>\n<li>Automatic scaling? The addition/deletion of servers should be automatic based on traffic?</li>\n</ul>\n<pre><code>DATA QUESTIONS\n</code></pre>\n<ul>\n<li>What are the <strong>I/O</strong> of the system? <strong>Data Flow</strong></li>\n<li><strong>Data Volumes</strong>(if need horizontal scaling use consistent hashing)</li>\n<li>What <strong>type of data</strong> would I need to store? Just text, or images videos? Static Dynamic content?</li>\n<li>What is the expected <strong>read to write ratio</strong>, read or write oriented.? (Master-Master, or Master-Slave database)</li>\n<li>If we need to horizontally scale do we have <strong>evenly distributed data</strong>? Celebrity problem?</li>\n<li>How long we need to keep the data?</li>\n<li>If we do historical loads how much back in time should they be?</li>\n<li>What's the distribution of accessing data? Is a long tail one (suitable for caching popular content).</li>\n<li>Do we need to our data store to be agile? Change and process in real time?</li>\n<li>On-prem or in the cloud?</li>\n<li>What are my endpoints of different parts what APIs would I need?</li>\n</ul>\n<pre><code>Implementation questions\n</code></pre>\n<ul>\n<li>Building from scratch? Can we use Third-Party API-s.</li>\n<li>Can we leverage some of the existing cloud infrastructures provided by Amazon, Google, or Microsoft?</li>\n</ul>\n<p><strong>2. Propose high-level design and engage interviewer</strong></p>\n<p>Goal: Propose blueprint of initial design. Ask for feedback.</p>\n<p>\"Does that seem like a sensible strategy?\"</p>\n<p>Tasks:</p>\n<ul>\n<li>Do back-of-the-envelope calculations to evaluate if your blueprint fits the scale constraints\nCommonly asked back-of-the-envelope estimations: QPS, peak QPS, storage, cache, number of servers\nQPS = queries per second. 1 day ~ 80,000 seconds</li>\n<li>Draw box diagrams with key components (Clients (user) mobile/web), APIs, web servers, data stores, cache, CDN, message queue.</li>\n</ul>\n<p><strong>3. Design deep dive</strong>\nOnce you agree with your interviewer on the blueprint, go into details on each component. <em>Design the most critical components first.</em> This part is specific to the interview and interviewer.</p>\n<p><strong>4. Wrap up</strong>\nInterviewer asks follow up questions. Or you can do some further discussion.\nTopics:</p>\n<ul>\n<li>Monitoring your solution (analytics to decide whether the solution is good).</li>\n<li>Performance optimization - e.g do we need multi data center setup using clouod provider</li>\n<li>Identify system bottlenecks and discuss potential improvements</li>\n<li><strong>Recap your design</strong></li>\n<li>Error cases (server failure, network loss, etc.) are interesting to talk about.</li>\n<li>Operation issues are worth mentioning. How do you monitor metrics and error logs?</li>\n<li>Scale the design - load balancer, horizontal scaling, caching, database sharding</li>\n<li>Discuss trade-offs:</li>\n</ul>\n<pre><code>Performance vs scalability\nLatency vs throughput\nAvailability vs consistency\n</code></pre>\n<h2 id=\"general-tips\">General tips<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#general-tips\"></a></h2>\n<ul>\n<li>gather requirement and write them down (don't be afraid to ask stupid questions)</li>\n<li>start with simplest possible setup (single server, single database, single storage)</li>\n<li>iterate, improve crucial parts (database (sharding,replication); storage(AWS S3, replicated buckets); load balancer)</li>\n<li>make improvements on more important parts first (database usually goes down before server)</li>\n</ul>\n<h2 id=\"horizontal-scaling-improvements\">Horizontal scaling improvements<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#horizontal-scaling-improvements\"></a></h2>\n<p>CCARRF</p>\n<ul>\n<li>loose consistency</li>\n<li>loose complexity</li>\n<li>win availability</li>\n<li>win reliability</li>\n<li>win redundancy</li>\n<li>win failover (no SPOF)</li>\n</ul>\n<h2 id=\"buzz-words\">Buzz words<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#buzz-words\"></a></h2>\n<p>horizontal, vertical scaling, availability, failover, reliability, redundancy, consistency, maintainability, load balancer, message queue, asynchronism, workers, data streaming services, database partitioning (split incoming data into different databases based on data rule e.g a-n, n-z), database replication (master-slaves, master-master), sharding, synchronization, parallel computing, SHA code, cache, CDN, Availability Zones (Data Centers), SQL = relational, NoSQL = non relational databases, celebrity problem (in data bases), reads >> writes usually (use cache), volatile memory = temporary memory, memcache (caching SQL) = <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@cache (Private)</a> in python, MongoDB = document database, DynamoDB = key-value store, stateless vs stateful web tier, user session data, VPS(Virtual Private Server) = your own ubunto (EC2 instance) vs shared hosts, hypervisors, sharded database (shards), normalized and de-normalized databases, high cohesion low coupling (scale independently), single point of failure SPOF, Disk slower than In-memory database slower than In-memory cache, ACID properties of a relational database, Transaction, CAP theorem, PACELC theorem (high availability=data replication -> tradeoff between consistency and latency) BLOB (binary large object), BLOB cache, TTL, weak/eventual/strong consistency, cache-aside, cache write-through, cache-write-through, cache-write-back, cache-refresh-ahead, distributed system, multi-server setup, micro-services, database transaction, begin->select-> commit/rollback</p>\n<h1 id=\"youtube\">Youtube<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#youtube\"></a></h1>\n<p><a href=\"https://www.youtube.com/watch?v=-W9F__D3oY4\">Harvard Scalability lecture</a></p>\n<p>When looking for host providers:</p>\n<ul>\n<li>FTP vs SFTP (secured file transfer protocol)</li>\n<li>VPS (virtual private server) vs shared hosts(many users use same server)</li>\n<li>VPS are your EC2 instances in AWS (your own ubunto) safe from other users but still susceptible to the provider</li>\n<li>VPS uses hypervisors. A hypervisor, also known as a virtual machine monitor or VMM, is software that creates and runs virtual machines (VMs).</li>\n</ul>\n<p>Load balancer strategies to balance:</p>\n<ul>\n<li>based on work load, least busy servers take the work</li>\n<li>dedicated servers for specific jobs (html server, Python server etc.)</li>\n<li>job i is taken by server i % N (problem might not have uniformly distributed workload)</li>\n</ul>\n<p>Load balancer problem? Single Point of Failure.</p>\n<ul>\n<li>buy 2 load balancers (pretty expensive 100k)</li>\n</ul>\n<p>RAID technology is a virtualization of data memory - data many disks put into \"one\" and keep copy/backups to be safe.</p>\n<p>Stateless architecture to have easier horizontal scaling on the web tier. Keep session data in NoSQL/SQL database shared by all servers (SPOF), better replicate it.</p>\n<p>MySQL caches queries, the same query running more than once is cached.\nmemcache is like <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@cache (Private)</a> in Python</p>\n<p>Database replication - Master-Master, Master Slaves</p>\n<p>Database partitioning - partition incoming data using some rule (a-n, n-z) and split into different databases</p>\n<p><a href=\"https://www.youtube.com/watch?v=REB_eGHK_P4\">Tech lead</a></p>\n<p>Load balancing help to distribute traffic to many different servers. Helps scalability, latency, throughput.</p>\n<p>NGINX is a load balancing software service.\nCan do DNS load balancing. Make the DNS returns you different ip addresses for same domain distributing to different servers.</p>\n<p>Throughput is a measure of how many units of information a system can process in a given amount of time.</p>\n<p>Caching - e.b often you'd hitting the database (reads) you need to setup cache.\nCache services Memcached, Redis, Cassandra</p>\n<p>CDN-s store static data, global network which caches your content.</p>\n<p>In interview might be asked to design a database schema:</p>\n<ul>\n<li>what are the primary keys</li>\n<li>what are your indecies</li>\n</ul>\n<p>Indecies in a database make it fast - no need to do linear search in WHERE clause, indecing gives you random access.\nIndexing your table improves the joins - nee to index the column on which you join.</p>\n<p>Database optimizations:</p>\n<ul>\n<li>replication (master slaves) </li>\n<li>indexing</li>\n</ul>\n<p>Scaling stuff:</p>\n<ul>\n<li>Webservers - use load balancers to do horizontal scaling</li>\n<li>Image server - CDN, cache</li>\n<li>Database server - cache, replication (solves reads)</li>\n<li>Database server writes - Sharding</li>\n</ul>\n<p>Sharding your database (database partitioning) - horizontal (split rows) and vertical (split different columns) sharding\nEach shard goes to different server.</p>\n<p>You don't want to scale too early and put optimization in the begining.</p>\n<p><a href=\"https://www.youtube.com/watch?v=q0KGYwNbf-0\">Clement System Design interview example</a></p>\n<h1 id=\"databases\">Databases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#databases\"></a></h1>\n<h2 id=\"differences-between-sql-and-nosql\">Differences between SQL and NoSQL<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#differences-between-sql-and-nosql\"></a></h2>\n<h3 id=\"storage\">Storage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#storage\"></a></h3>\n<ul>\n<li>SQL: store data in tables.</li>\n<li>NoSQL: have different data storage models.</li>\n</ul>\n<h3 id=\"schema\">Schema<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#schema\"></a></h3>\n<ul>\n<li>SQL\n<ul>\n<li>Each record conforms to a fixed schema.</li>\n<li>Schema can be altered, but it requires modifying the whole database.</li>\n</ul>\n</li>\n<li>NoSQL:\n<ul>\n<li>Schemas are dynamic.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"querying\">Querying<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#querying\"></a></h3>\n<ul>\n<li>SQL\n<ul>\n<li>Use SQL (structured query language) for defining and manipulating the data.</li>\n</ul>\n</li>\n<li>NoSQL\n<ul>\n<li>Queries are focused on a collection of documents.</li>\n<li>UnQL (unstructured query language).</li>\n<li>Different databases have different syntax.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"scalability\">Scalability<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scalability\"></a></h3>\n<ul>\n<li>SQL\n<ul>\n<li>Vertically scalable (by increasing the horsepower: memory, CPU, etc) and expensive.</li>\n<li>Horizontally scalable (across multiple servers); but it can be challenging and time-consuming.</li>\n</ul>\n</li>\n<li>NoSQL\n<ul>\n<li>Horizontablly scalable (by adding more servers) and cheap.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"acid\">ACID<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#acid\"></a></h3>\n<ul>\n<li>Atomicity, consistency, isolation, durability</li>\n<li>SQL\n<ul>\n<li>ACID compliant</li>\n<li>Data reliability</li>\n<li>Gurantee of transactions</li>\n</ul>\n</li>\n<li>NoSQL\n<ul>\n<li>Most sacrifice ACID compliance for performance and scalability.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"which-one-to-use\">Which one to use?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#which-one-to-use\"></a></h2>\n<h3 id=\"sql\">SQL<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sql\"></a></h3>\n<ul>\n<li>Ensure ACID compliance.\n<ul>\n<li>Reduce anomalies.</li>\n<li>Protect database integrity.</li>\n</ul>\n</li>\n<li>Data is structured and unchanging.</li>\n</ul>\n<h3 id=\"nosql\">NoSQL<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#nosql\"></a></h3>\n<ul>\n<li>Data has little or no structure.</li>\n<li>Make the most of cloud computing and storage.\n<ul>\n<li>Cloud-based storage requires data to be easily spread across multiple servers to scale up.</li>\n</ul>\n</li>\n<li>Rapid development.\n<ul>\n<li>Frequent updates to the data structure.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Reasons for SQL:</strong></p>\n<ul>\n<li>Structured data</li>\n<li>Strict schema</li>\n<li>Relational data</li>\n<li>Need for complex joins</li>\n<li>Transactions</li>\n<li>Clear patterns for scaling</li>\n<li>More established: developers, community, code, tools, etc</li>\n<li>Lookups by index are very fast</li>\n</ul>\n<p><strong>Reasons for NoSQL:</strong></p>\n<ul>\n<li>Semi-structured data</li>\n<li>Dynamic or flexible schema</li>\n<li>Non-relational data</li>\n<li>No need for complex joins</li>\n<li>Store many TB (or PB) of data</li>\n<li>Very data intensive workload</li>\n<li>Very high throughput for IOPS</li>\n</ul>\n<h2 id=\"common-types-of-nosql\">Common types of NoSQL<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#common-types-of-nosql\"></a></h2>\n<h3 id=\"key-value-stores\">Key-value stores<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-value-stores\"></a></h3>\n<ul>\n<li>Array of key-value pairs. The \"key\" is an attribute name.</li>\n<li>Redis, Vodemort, Dynamo.</li>\n</ul>\n<h3 id=\"document-databases\">Document databases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#document-databases\"></a></h3>\n<ul>\n<li>KeyValue, but values are documents.</li>\n<li>Documents are grouped in collections.</li>\n<li>Each document can have an entirely different structure.</li>\n<li>CouchDB, MongoDB , Dynamo</li>\n</ul>\n<h3 id=\"wide-column--columnar-databases\">Wide-column / columnar databases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#wide-column--columnar-databases\"></a></h3>\n<ul>\n<li>Column families - containers for rows.</li>\n<li>No need to know all the columns up front.</li>\n<li>Each row can have different number of columns.</li>\n<li>Cassandra, HBase.</li>\n</ul>\n<h3 id=\"graph-database\">Graph database<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#graph-database\"></a></h3>\n<ul>\n<li>Data is stored in graph structures\n<ul>\n<li>Nodes: entities</li>\n<li>Properties: information about the entities</li>\n<li>Lines: connections between the entities</li>\n</ul>\n</li>\n<li>Neo4J, InfiniteGraph</li>\n</ul>\n<h1 id=\"system-design-interview---an-insider-guide\">System Design Interview - An Insider Guide<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#system-design-interview---an-insider-guide\"></a></h1>\n<h2 id=\"chapter-1---scale-from-zero-to-million-users\">Chapter 1 - Scale from zero to million users<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#chapter-1---scale-from-zero-to-million-users\"></a></h2>\n<p>This chapter discusses the process of scaling from a single web server to an architecture with:\nUser, DNS, CDN, Load Balancer, Web tier (Stateless servers), Data Tier (Sharded Databases + Replication), Cache,\nNoSQL database to keep user session data (stateless servers), message queue, logging and metric tools, Data Centers for\ninternational coverage.</p>\n<p>â€¢ Keep web tier stateless \\\nâ€¢ Build redundancy at every tier \\\nâ€¢ Cache data as much as you can \\\nâ€¢ Support multiple data centers \\\nâ€¢ Host static assets in CDN \\\nâ€¢ Scale your data tier by sharding \\\nâ€¢ Split tiers into individual services \\\nâ€¢ Monitor your system and use automation tools</p>\n<p><img src=\"/dendron-wiki/assets/images/web_traffic.png\" alt=\"web_traffic.png\"></p>\n<p>System Design : <a href=\"https://bit.ly/41PTaAp\">https://bit.ly/41PTaAp</a><br>\nWinning System Design Case Studies: <a href=\"https://tinyurl.com/yfvyrjn7\">https://tinyurl.com/yfvyrjn7</a><br>\nGithub : <a href=\"https://shorturl.at/hlow0\">https://shorturl.at/hlow0</a><br>\nML System Design Series : <a href=\"https://rb.gy/dd8dfe\">https://rb.gy/dd8dfe</a><br>\nDesign Google Drive : <a href=\"https://bit.ly/3uXdQZ7\">https://bit.ly/3uXdQZ7</a><br>\nDesign Messenger App : <a href=\"https://bit.ly/3DoAAXi\">https://bit.ly/3DoAAXi</a><br>\nDesign Instagram : <a href=\"https://bit.ly/3BFeHlh\">https://bit.ly/3BFeHlh</a><br>\nDesign Twitter : <a href=\"https://bit.ly/3qIG9Ih\">https://bit.ly/3qIG9Ih</a><br>\nDesign Robinhood : <a href=\"https://bit.ly/3BFeHlh\">https://bit.ly/3BFeHlh</a><br>\nDesign Swiggy: <a href=\"https://bit.ly/3BFeHlh\">https://bit.ly/3BFeHlh</a><br>\nDesign CashApp : <a href=\"https://bit.ly/3BFeHlh\">https://bit.ly/3BFeHlh</a><br>\nDesign Kayak: <a href=\"https://bit.ly/3DoAAXi\">https://bit.ly/3DoAAXi</a><br>\nDesign Paytm : <a href=\"https://bit.ly/3qIG9Ih\">https://bit.ly/3qIG9Ih</a><br>\nDesign ESPN Streaming : <a href=\"https://bit.ly/3qIG9Ih\">https://bit.ly/3qIG9Ih</a><br>\nDesign Agoda : <a href=\"https://bit.ly/3xP078x\">https://bit.ly/3xP078x</a><br>\nDesign Razorpay : <a href=\"https://bit.ly/3xP078x\">https://bit.ly/3xP078x</a><br>\nDesign Apple Music : <a href=\"https://bit.ly/3xP078x\">https://bit.ly/3xP078x</a><br>\nDesign CricHD: <a href=\"https://bit.ly/3xP078x\">https://bit.ly/3xP078x</a><br>\nDesign Alibaba: <a href=\"https://bit.ly/3xP078x\">https://bit.ly/3xP078x</a><br>\nDesign Substack: <a href=\"https://bit.ly/3xP078x\">https://bit.ly/3xP078x</a><br>\nDesign TrueCaller: <a href=\"https://shorturl.at/pzABN\">https://shorturl.at/pzABN</a><br>\nDesign Stock exchange Design System: <a href=\"https://shorturl.at/svCK1\">https://shorturl.at/svCK1</a><br>\nDesign Distributed Cache : <a href=\"https://shorturl.at/fjBV6\">https://shorturl.at/fjBV6</a><br>\nDesign Twilio : <a href=\"https://shorturl.at/uDJP7\">https://shorturl.at/uDJP7</a><br>\nDesign Google Docs : <a href=\"https://tinyurl.com/mr4d9v83\">https://tinyurl.com/mr4d9v83</a><br>\nDesign Doordash : <a href=\"https://tinyurl.com/27nh5s7s\">https://tinyurl.com/27nh5s7s</a><br>\nDesign MS Docs : <a href=\"https://tinyurl.com/9fpa8jpc\">https://tinyurl.com/9fpa8jpc</a><br>\nDesign Zomato : <a href=\"https://tinyurl.com/566t34ph\">https://tinyurl.com/566t34ph</a><br>\nDesign Linkedin : <a href=\"https://bit.ly/3OjXy7c\">https://bit.ly/3OjXy7c</a><br>\nDesign Google Maps : <a href=\"https://bit.ly/3BDdTwn\">https://bit.ly/3BDdTwn</a><br>\nDesign Telegram : <a href=\"https://bit.ly/42N5LW2\">https://bit.ly/42N5LW2</a><br>\nDesign Snapchat : <a href=\"https://bit.ly/3pRP3pW\">https://bit.ly/3pRP3pW</a><br>\nDesign One Drive : <a href=\"https://bit.ly/438bAwZ\">https://bit.ly/438bAwZ</a><br>\nDesign Quora : <a href=\"https://bit.ly/3FeD9dL\">https://bit.ly/3FeD9dL</a><br>\nDesign Tinder : <a href=\"https://bit.ly/3Mcyj3X\">https://bit.ly/3Mcyj3X</a><br>\nDesign TikTok : <a href=\"https://bit.ly/3UUlKxP\">https://bit.ly/3UUlKxP</a><br>\nDesign Netflix : <a href=\"https://bit.ly/3GrAUG1\">https://bit.ly/3GrAUG1</a><br>\nDesign Uber : <a href=\"https://bit.ly/3fyvnlT\">https://bit.ly/3fyvnlT</a><br>\nDesign Youtube : <a href=\"https://bit.ly/3dFyvvy\">https://bit.ly/3dFyvvy</a><br>\nDesign Reddit : <a href=\"https://bit.ly/3OgGJrL\">https://bit.ly/3OgGJrL</a><br>\nDesign Facebookâ€™s Newsfeed : <a href=\"https://bit.ly/3RldaW7\">https://bit.ly/3RldaW7</a><br>\nDesign Amazon Prime Video : <a href=\"https://bit.ly/3hVpWP4\">https://bit.ly/3hVpWP4</a><br>\nDesign Dropbox : <a href=\"https://bit.ly/3SnhncU\">https://bit.ly/3SnhncU</a><br>\nDesign Yelp: <a href=\"https://bit.ly/3E7IgO5\">https://bit.ly/3E7IgO5</a><br>\nDesign Whatspp : <a href=\"https://bit.ly/3M2GOhP\">https://bit.ly/3M2GOhP</a>  </p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/dendron-wiki/notes/82lxbmwgtrgestyejv1wg2j\">All interview stages</a></li>\n</ul>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1744237493819,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"ea936af1aea818f3052610daac103a63","links":[],"anchors":{},"children":["dgcsvcwea8scgdegrk9tfni","xig93vo47ou1bkr7s4w1wb2","ro9bbyftsutm88mxw6r16p5","ypia1zmywsklpicmcgrzlz1","w7iitlako61ppm27mym400a","6bx5plramu4hksomqc1n55z","4nki3bedlvs3mnkixj3a07k","9r5ym61dkwap92fvbte1jkq","849u97nrsuyekmr4a1r92ux","2b5bwf46z6v132wu7xghvrp","dygp5h2vzw4mkromwmofynb","7h50s7ga5ziiyblmoctsqmw","pglaolxcge4xfvgoph3je89","uy9u1co5ih1fokind8tg0eq","jc23ggp8iiu92kpnzo721to","f1u2a47guuw70olv36bzf66","c1bs7wsjfbhb0zipaywqv1","2av385tcj2cbumxprsauff3","v77wdzobzcackzimz6a7crv"],"parent":null,"data":{},"body":"\nWelcome to my Knowledge Base! Here I write about my perception of life, document exciting things I've learned, debate (with myself) on controversial topics. If you know me you will not be surprised to find out that I write mostly about engineering and maths. Other topics I'm interested in are economics, politics, business, chess and poker."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/dendron-wiki","siteUrl":"https://ngocuong0105.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","ga":{"tracking":"G-W5DRRLQ1N7"},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}