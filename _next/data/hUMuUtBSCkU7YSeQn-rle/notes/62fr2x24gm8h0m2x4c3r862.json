{"pageProps":{"note":{"id":"62fr2x24gm8h0m2x4c3r862","title":"Misc","desc":"","updated":1695379055894,"created":1664382870554,"custom":{},"fname":"engineering.algorithms.Misc","type":"note","vault":{"fsPath":"vault"},"contentHash":"70a9327ad44bde694ee16721c499c364","links":[{"type":"wiki","from":{"fname":"engineering.algorithms.Misc","id":"62fr2x24gm8h0m2x4c3r862","vaultName":"vault"},"value":"tags.Zadachi","alias":"#Zadachi","position":{"start":{"line":22,"column":1,"offset":336},"end":{"line":22,"column":9,"offset":344},"indent":[]},"xvault":false,"to":{"fname":"tags.Zadachi"}},{"type":"wiki","from":{"fname":"engineering.algorithms.Misc","id":"62fr2x24gm8h0m2x4c3r862","vaultName":"vault"},"value":"tags.QED","alias":"#QED","position":{"start":{"line":126,"column":1,"offset":3518},"end":{"line":126,"column":5,"offset":3522},"indent":[]},"xvault":false,"to":{"fname":"tags.QED"}},{"type":"wiki","from":{"fname":"engineering.algorithms.Misc","id":"62fr2x24gm8h0m2x4c3r862","vaultName":"vault"},"value":"tags.QED","alias":"#QED","position":{"start":{"line":249,"column":1,"offset":8653},"end":{"line":249,"column":5,"offset":8657},"indent":[]},"xvault":false,"to":{"fname":"tags.QED"}},{"type":"wiki","from":{"fname":"engineering.algorithms.Misc","id":"62fr2x24gm8h0m2x4c3r862","vaultName":"vault"},"value":"tags.Zadachi","alias":"#Zadachi","position":{"start":{"line":307,"column":1,"offset":10032},"end":{"line":307,"column":9,"offset":10040},"indent":[]},"xvault":false,"to":{"fname":"tags.Zadachi"}}],"anchors":{"sequences":{"type":"header","text":"Sequences","value":"sequences","line":7,"column":0,"depth":1},"binary-search":{"type":"header","text":"Binary Search","value":"binary-search","line":9,"column":0,"depth":2},"rmq-task-range-minimum-query---the-smallest-element-in-an-interval":{"type":"header","text":"RMQ task (Range Minimum Query - the smallest element in an interval)","value":"rmq-task-range-minimum-query---the-smallest-element-in-an-interval","line":65,"column":0,"depth":2},"longest-increasing-subsequence":{"type":"header","text":"Longest increasing subsequence","value":"longest-increasing-subsequence","line":66,"column":0,"depth":2},"maximumminimum-subarray-sum":{"type":"header","text":"Maximum/minimum subarray sum","value":"maximumminimum-subarray-sum","line":67,"column":0,"depth":2},"k-th-order-statistic-in-on":{"type":"header","text":"K-th order statistic in O(N)","value":"k-th-order-statistic-in-on","line":135,"column":0,"depth":2},"game-theory":{"type":"header","text":"Game Theory","value":"game-theory","line":136,"column":0,"depth":1},"games-on-arbitrary-graphs":{"type":"header","text":"Games on arbitrary graphs","value":"games-on-arbitrary-graphs","line":137,"column":0,"depth":2},"sprague-grundy-theorem-nim":{"type":"header","text":"Sprague-Grundy theorem. Nim","value":"sprague-grundy-theorem-nim","line":138,"column":0,"depth":2},"hackenbush-game":{"type":"header","text":"Hackenbush game","value":"hackenbush-game","line":247,"column":0,"depth":2},"schedules":{"type":"header","text":"Schedules","value":"schedules","line":257,"column":0,"depth":1},"scheduling-jobs-on-one-machine":{"type":"header","text":"Scheduling jobs on one machine","value":"scheduling-jobs-on-one-machine","line":258,"column":0,"depth":2},"scheduling-jobs-on-two-machines":{"type":"header","text":"Scheduling jobs on two machines","value":"scheduling-jobs-on-two-machines","line":259,"column":0,"depth":2},"optimal-schedule-of-jobs-given-their-deadlines-and-durations":{"type":"header","text":"Optimal schedule of jobs given their deadlines and durations","value":"optimal-schedule-of-jobs-given-their-deadlines-and-durations","line":260,"column":0,"depth":2},"miscellaneous":{"type":"header","text":"Miscellaneous","value":"miscellaneous","line":261,"column":0,"depth":1},"josephus-problem":{"type":"header","text":"Josephus problem","value":"josephus-problem","line":262,"column":0,"depth":2},"15-puzzle-game-existence-of-the-solution":{"type":"header","text":"15 Puzzle Game: Existence Of The Solution","value":"15-puzzle-game-existence-of-the-solution","line":263,"column":0,"depth":2},"the-stern-brocot-tree-and-farey-sequences":{"type":"header","text":"The Stern-Brocot Tree and Farey Sequences","value":"the-stern-brocot-tree-and-farey-sequences","line":264,"column":0,"depth":2},"rotate-image":{"type":"header","text":"Rotate image","value":"rotate-image","line":266,"column":0,"depth":2},"longest-valid-parenthesis":{"type":"header","text":"Longest valid parenthesis","value":"longest-valid-parenthesis","line":287,"column":0,"depth":2},"bit-manipulation":{"type":"header","text":"Bit manipulation","value":"bit-manipulation","line":312,"column":0,"depth":2},"random-index-pick-with-weights-in-o1":{"type":"header","text":"Random index pick with weights in O(1)","value":"random-index-pick-with-weights-in-o1","line":316,"column":0,"depth":2}},"children":[],"parent":"7m3gais9ll8mlmzqlw08s7g","data":{}},"body":"<h1 id=\"misc\">Misc<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#misc\"></a></h1>\n<h1 id=\"sequences\">Sequences<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sequences\"></a></h1>\n<h2 id=\"binary-search\">Binary Search<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-search\"></a></h2>\n<ul>\n<li>template for finding smallest element <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span></span> in array such that <code>func(i)</code> is <code>True</code></li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">&#x3C;</span> j<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>j <span class=\"token operator\">>></span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> func<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            j <span class=\"token operator\">=</span> mid\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> i\n</code></pre>\n</details>\n<p><a class=\"color-tag\" style=\"--tag-color: #90e4c1;\" href=\"/dendron-wiki/notes/yee0akilojq0gnoske9jphs\">#Zadachi</a></p>\n<ul>\n<li>2D problems often treat columns/rows as elements. E.g each column is element and we do binary search on columns <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m*logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<ul>\n<li><a href=\"https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/\">black pixels</a></li>\n<li><a href=\"https://leetcode.com/problems/find-a-peak-element-ii/\">peak element</a></li>\n</ul>\n</li>\n</ul>\n<p><strong>binary search in disguise</strong></p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/maximum-average-subarray-ii/\">maximum average subarray</a></li>\n<li><a href=\"https://leetcode.com/problems/sum-of-floored-pairs/\">sum of floored pairs</a></li>\n<li><a href=\"https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/\">max submatrix sum less than k</a></li>\n<li><a href=\"https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/\">mysterious function</a></li>\n<li><a href=\"https://leetcode.com/problems/minimum-space-wasted-from-packaging/\">minimum wasted space</a></li>\n<li><a href=\"http://www.usaco.org/index.php?page=viewproblem2&#x26;cpid=597\">angry birds</a></li>\n<li><a href=\"https://leetcode.com/problems/minimum-cost-to-make-array-equal/\">minimum cost to make equal array</a>\n<strong>built in python library</strong></li>\n</ul>\n<p><strong>Added after Python 3.10!!!</strong></p>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">import</span> bisect\nbisect<span class=\"token punctuation\">.</span>bisect_left<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span> <span class=\"token comment\"># uses >=</span>\nbisect<span class=\"token punctuation\">.</span>bisect_right<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span> <span class=\"token comment\"># uses ></span>\n\n<span class=\"token comment\"># can binary search tuples too</span>\nbisect<span class=\"token punctuation\">.</span>bisect_left<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>binary search + insert</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> bisect\nbisect<span class=\"token punctuation\">.</span>insort_left<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span> <span class=\"token comment\"># runs binary search and inserts O(n)</span>\n</code></pre>\n</details>\n<h2 id=\"rmq-task-range-minimum-query---the-smallest-element-in-an-interval\">RMQ task (Range Minimum Query - the smallest element in an interval)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rmq-task-range-minimum-query---the-smallest-element-in-an-interval\"></a></h2>\n<h2 id=\"longest-increasing-subsequence\">Longest increasing subsequence<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#longest-increasing-subsequence\"></a></h2>\n<h2 id=\"maximumminimum-subarray-sum\">Maximum/minimum subarray sum<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#maximumminimum-subarray-sum\"></a></h2>\n<ul>\n<li><a href=\"https://leetcode.com/problems/maximum-subarray/\">leetcode</a></li>\n</ul>\n<p><strong>Solution 1.</strong></p>\n<ul>\n<li>goal find <code>nums[l:r+1]</code> with max sum</li>\n<li>use cumulative sums <code>nums[l:r+1] = cum[r]-cum[l-1]</code></li>\n<li>redefined goal for each <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span> find <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span></span> which maximizes <code>sum(nums[l:r+1])</code></li>\n<li>compute <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">cum[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span></span> as we go, and maintain minimum possible value for <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">cum[l-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></span></li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    res<span class=\"token punctuation\">,</span>min_sum<span class=\"token punctuation\">,</span>sm <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sm <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n        res <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>sm<span class=\"token operator\">-</span>min_sum<span class=\"token punctuation\">)</span>\n        min_sum <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>min_sum<span class=\"token punctuation\">,</span>sm<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n</code></pre>\n</details>\n<p><strong>Solution 2.</strong></p>\n<ul>\n<li>Kadane algo</li>\n<li>compute partial/cumulative sum <code>sm</code> as we go. If negative restart to 0</li>\n<li>our maximum subarray must start at a critical point when <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>m</mi><mo>&#x3C;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">sm &#x3C; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span> proof bby minimality + contradiction.</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    res<span class=\"token punctuation\">,</span>curr <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        curr <span class=\"token operator\">+=</span> num\n        res <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>curr<span class=\"token punctuation\">)</span>\n        curr <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n            curr<span class=\"token punctuation\">,</span>res <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            curr <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token operator\">+</span>num<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>curr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n</code></pre>\n</details>\n<p><strong>Solution 3.</strong></p>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    curr<span class=\"token punctuation\">,</span>res <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        curr <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token operator\">+</span>num<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>curr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n</code></pre>\n</details>\n<ul>\n<li><a href=\"https://leetcode.com/problems/maximum-alternating-subarray-sum/\">maximum alternating subarray</a></li>\n</ul>\n<p><a class=\"color-tag\" style=\"--tag-color: #ef4026;\" href=\"/dendron-wiki/notes/2pzhpouodnn9fn9451isbr6\">#QED</a></p>\n<h2 id=\"k-th-order-statistic-in-on\">K-th order statistic in O(N)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#k-th-order-statistic-in-on\"></a></h2>\n<h1 id=\"game-theory\">Game Theory<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#game-theory\"></a></h1>\n<h2 id=\"games-on-arbitrary-graphs\">Games on arbitrary graphs<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#games-on-arbitrary-graphs\"></a></h2>\n<h2 id=\"sprague-grundy-theorem-nim\">Sprague-Grundy theorem. Nim<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sprague-grundy-theorem-nim\"></a></h2>\n<p><strong>Concept 1 (Impartial Game)</strong>: Given a particular arrangement of the game\nboard, if either player have exactly the same set of moves should he\nmove first, and both players have exactly the same winning condition,\nthen this game is called impartial game. For example, chess is not\nimpartial because the players can control only their own pieces, and\nthe <a href=\"https://leetcode.com/problems/flip-game-ii/\">flip game II</a> , on the other hand, is impartial.</p>\n<p><strong>Concept 2 (Normal Play vs Misere Play)</strong>: If the winning condition of\nthe game is that the opponent has no valid moves, then this game is\nsaid to follow the normal play convention; if, alternatively, the\nwinning condition is that the player himself has no valid moves, then\nthe game is a Misere game. Our +- <a href=\"https://leetcode.com/problems/flip-game-ii/\">flip game II</a> has apprently normal play.</p>\n<p>We consider impartial normal games.</p>\n<p>Such games can be completely described by a directed acyclic graph: the vertices are game states and the edges are transitions (moves).\nA vertex without outgoing edges is a losing vertex (a player who must make a move from this vertex loses).</p>\n<p><strong>Goal:</strong> A state is winning if there is at least one transition to a losing state and is losing if there isn't at least one transition to a losing state. Our task is to classify the states of a given game.</p>\n<p><strong>Nim</strong>\nThere are several piles, each with several stones. In a move a player can take any positive number of stones from any one pile and throw them away. A player loses if they can't make a move, which happens when all the piles are empty.</p>\n<p><strong>Charles L. Bouton Theorem.</strong> The current player has a winning strategy if and only if the xor-sum of the pile sizes is non-zero.</p>\n<p>Proof by induction. Induction step proves that if the current state is 0 then all other neighbour states are non zero. If the current state is non-zero you can always reach a zero state, consider the pile with the largest number of stones and consider is largest bit. (do xor tricks).</p>\n<p><strong>Colloraly.</strong> Nim games are equivalent as long as the xor value is the same.</p>\n<p>Game of\ndsacan be reduced to game of one pile.</p>\n<p><strong>Sprague-Grundy theorem</strong>\nThis theorem proves the equivalence of impartial games and Nim. It reduces every impartial normal game to Nim.</p>\n<p>Let's consider a state <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> of a two-player impartial game and let <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo>…</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{v_{i},i = 1 \\dots n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span></span> be the states reachable from it. To this state <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span>, we can assign a fully equivalent game of Nim with one pile of size <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span>. The number is called the Grundy value or <strong>nim-value</strong> of state <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span>. (this is the Game to Nim mapping)</p>\n<p>Find this number <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> recursively:</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>m</mi><mi>e</mi><mi>x</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = mex(x_1, x_2, .... x_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">....</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">mex</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span></span></span></span></span> is the minimum excluding function, e.g <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">mex([0,1,2,4,5]) = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">([</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">])</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span></span></p>\n<p>Recursion base case is the end states where there are no possible moves and whoever turn it is they loose (nim-value equal to 0).</p>\n<p><strong>Recipe</strong>\nTo calculate the Grundy value of a given state you need to:</p>\n<ol>\n<li>Get all possible transitions from this state</li>\n<li>Each transition can lead to a sum of independent games (one game in the degenerate case). Calculate the Grundy value for each independent game and xor-sum them. Of course xor does nothing if there is just one game.</li>\n<li>After we calculated Grundy values for each transition we find the state's value as the <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">mex</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span></span></span></span></span> of these numbers.</li>\n<li>If the value is zero, then the current state is losing, otherwise it is winning.</li>\n</ol>\n<p><strong>Problems</strong></p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/flip-game-ii/\">flip game II</a></li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># O(C_n) where C_n is n-th Catalan number</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">canWin</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            neigh <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'++'</span><span class=\"token punctuation\">:</span> neigh<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">'--'</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> neigh\n        <span class=\"token decorator annotation punctuation\">@cache</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> u <span class=\"token keyword\">in</span> adj<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dfs<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> dfs<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># O(n^2) Sprague-Grundy theorem</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">canWin</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@cache</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            st <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'++'</span><span class=\"token punctuation\">:</span>\n                    st<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> dp<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># mex</span>\n            i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n            <span class=\"token keyword\">while</span> i <span class=\"token keyword\">in</span> st<span class=\"token punctuation\">:</span>\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">return</span> i\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span>\n\n</code></pre>\n</details>\n<p><strong>Note</strong> the second solution is not <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> truly as it has lots of subproblems. Need to preprocess the input so that the subproblems depend on single numbers. e.g. get lenghts of plus groups: '++++--++-' preprocess to <code>[4,2]</code>. See your leetcode solution.</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/game-of-nim/\">game of nim</a></li>\n<li><a href=\"https://leetcode.com/problems/chalkboard-xor-game/\">chalkboard</a></li>\n</ul>\n<h2 id=\"hackenbush-game\">Hackenbush game<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hackenbush-game\"></a></h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Hackenbush\">The game</a></p>\n<p>Uses Sprague-Grundy numbers</p>\n<p>-[Remove from fibonaci tree]<a href=\"https://leetcode.com/problems/subtree-removal-game-with-fibonacci-tree/description/\">https://leetcode.com/problems/subtree-removal-game-with-fibonacci-tree/description/</a>)</p>\n<p><a class=\"color-tag\" style=\"--tag-color: #ef4026;\" href=\"/dendron-wiki/notes/2pzhpouodnn9fn9451isbr6\">#QED</a></p>\n<h1 id=\"schedules\">Schedules<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#schedules\"></a></h1>\n<h2 id=\"scheduling-jobs-on-one-machine\">Scheduling jobs on one machine<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scheduling-jobs-on-one-machine\"></a></h2>\n<h2 id=\"scheduling-jobs-on-two-machines\">Scheduling jobs on two machines<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scheduling-jobs-on-two-machines\"></a></h2>\n<h2 id=\"optimal-schedule-of-jobs-given-their-deadlines-and-durations\">Optimal schedule of jobs given their deadlines and durations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#optimal-schedule-of-jobs-given-their-deadlines-and-durations\"></a></h2>\n<h1 id=\"miscellaneous\">Miscellaneous<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#miscellaneous\"></a></h1>\n<h2 id=\"josephus-problem\">Josephus problem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#josephus-problem\"></a></h2>\n<h2 id=\"15-puzzle-game-existence-of-the-solution\">15 Puzzle Game: Existence Of The Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#15-puzzle-game-existence-of-the-solution\"></a></h2>\n<h2 id=\"the-stern-brocot-tree-and-farey-sequences\">The Stern-Brocot Tree and Farey Sequences<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-stern-brocot-tree-and-farey-sequences\"></a></h2>\n<h2 id=\"rotate-image\">Rotate image<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rotate-image\"></a></h2>\n<ul>\n<li>rotate image, <a href=\"https://leetcode.com/problems/rotate-image/\">p1</a></li>\n<li>90 degree rotation = flip + transpose</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">def</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    matrix<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">rotate_inplace</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    matrix<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n</code></pre>\n</details>\n<h2 id=\"longest-valid-parenthesis\">Longest valid parenthesis<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#longest-valid-parenthesis\"></a></h2>\n<ul>\n<li><a href=\"https://leetcode.com/problems/longest-valid-parentheses/\">leetcode</a></li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">longestValidParentheses</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            bal<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>curr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n            <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n                bal <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span>\n                bal <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> ch<span class=\"token punctuation\">)</span>\n                curr <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> bal <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> \n                    res <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>curr<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">elif</span> bal<span class=\"token operator\">&#x3C;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    curr<span class=\"token punctuation\">,</span>bal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n            <span class=\"token keyword\">return</span> res\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>compute<span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compute<span class=\"token punctuation\">(</span><span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</details>\n<h2 id=\"bit-manipulation\">Bit manipulation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#bit-manipulation\"></a></h2>\n<p><a class=\"color-tag\" style=\"--tag-color: #90e4c1;\" href=\"/dendron-wiki/notes/yee0akilojq0gnoske9jphs\">#Zadachi</a></p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/convert-a-number-to-hexadecimal/\">convert to hexadecimal</a></li>\n</ul>\n<h2 id=\"random-index-pick-with-weights-in-o1\">Random index pick with weights in O(1)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#random-index-pick-with-weights-in-o1\"></a></h2>\n<p><a href=\"https://leetcode.com/problems/random-pick-with-weight/\">problem</a></p>\n<p>Can do Preprocessing in <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span> and then pick in <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> (better than standard <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span> using cdf and binary search)</p>\n<p>Reference <a href=\"https://en.wikipedia.org/wiki/Alias_method\">Alias method</a>, <a href=\"https://leetcode.com/problems/random-pick-with-weight/discuss/671439/Python-Smart-O(1)-solution-with-detailed-explanation\">dbabichev</a></p>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ep <span class=\"token operator\">=</span> <span class=\"token number\">10e-10</span>\n        n<span class=\"token punctuation\">,</span>sm <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n        w <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ww<span class=\"token operator\">/</span>sm <span class=\"token keyword\">for</span> ww <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>boxes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>ww<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>ww <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> ww<span class=\"token operator\">&#x3C;</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>n<span class=\"token punctuation\">]</span>\n        g <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>ww<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>ww <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> ww<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>n<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> s <span class=\"token keyword\">and</span> g<span class=\"token punctuation\">:</span>\n            i<span class=\"token punctuation\">,</span>ws <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            j<span class=\"token punctuation\">,</span>wg <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>boxes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>ws<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># index,index,weight</span>\n            g<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>n<span class=\"token operator\">-</span>ws<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> g<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&#x3C;</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>n<span class=\"token operator\">-</span>ep<span class=\"token punctuation\">:</span>\n                s<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>ww <span class=\"token keyword\">in</span> g<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>boxes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">pickIndex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>boxes<span class=\"token punctuation\">)</span>\n        box_num <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>boxes<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>boxes<span class=\"token punctuation\">[</span>box_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>boxes<span class=\"token punctuation\">[</span>box_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</details>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1744237493819,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"ea936af1aea818f3052610daac103a63","links":[],"anchors":{},"children":["dgcsvcwea8scgdegrk9tfni","xig93vo47ou1bkr7s4w1wb2","ro9bbyftsutm88mxw6r16p5","ypia1zmywsklpicmcgrzlz1","w7iitlako61ppm27mym400a","6bx5plramu4hksomqc1n55z","4nki3bedlvs3mnkixj3a07k","9r5ym61dkwap92fvbte1jkq","849u97nrsuyekmr4a1r92ux","2b5bwf46z6v132wu7xghvrp","dygp5h2vzw4mkromwmofynb","7h50s7ga5ziiyblmoctsqmw","pglaolxcge4xfvgoph3je89","uy9u1co5ih1fokind8tg0eq","jc23ggp8iiu92kpnzo721to","f1u2a47guuw70olv36bzf66","c1bs7wsjfbhb0zipaywqv1","2av385tcj2cbumxprsauff3","v77wdzobzcackzimz6a7crv"],"parent":null,"data":{},"body":"\nWelcome to my Knowledge Base! Here I write about my perception of life, document exciting things I've learned, debate (with myself) on controversial topics. If you know me you will not be surprised to find out that I write mostly about engineering and maths. Other topics I'm interested in are economics, politics, business, chess and poker."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/dendron-wiki","siteUrl":"https://ngocuong0105.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","ga":{"tracking":"G-W5DRRLQ1N7"},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}