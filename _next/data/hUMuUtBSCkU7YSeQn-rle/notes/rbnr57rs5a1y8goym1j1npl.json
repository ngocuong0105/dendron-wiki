{"pageProps":{"note":{"id":"rbnr57rs5a1y8goym1j1npl","title":"Data Structures","desc":"","updated":1726661561900,"created":1664382752052,"custom":{},"fname":"engineering.algorithms.Data Structures","type":"note","vault":{"fsPath":"vault"},"contentHash":"1adc438a0a8a1db5ca07fd2399ba274e","links":[{"type":"wiki","from":{"fname":"engineering.algorithms.Data Structures","id":"rbnr57rs5a1y8goym1j1npl","vaultName":"vault"},"value":"tags.Zadachi","alias":"#Zadachi","position":{"start":{"line":406,"column":1,"offset":10605},"end":{"line":406,"column":9,"offset":10613},"indent":[]},"xvault":false,"to":{"fname":"tags.Zadachi"}}],"anchors":{"fundamentals":{"type":"header","text":"Fundamentals","value":"fundamentals","line":8,"column":0,"depth":1},"hash-tables":{"type":"header","text":"Hash Tables","value":"hash-tables","line":11,"column":0,"depth":2},"minimum-stack--minimum-queue":{"type":"header","text":"Minimum Stack / Minimum Queue","value":"minimum-stack--minimum-queue","line":77,"column":0,"depth":2},"sparse-table":{"type":"header","text":"Sparse Table","value":"sparse-table","line":284,"column":0,"depth":2},"trees":{"type":"header","text":"Trees","value":"trees","line":286,"column":0,"depth":1},"trie---prefix-tree":{"type":"header","text":"Trie - Prefix tree","value":"trie---prefix-tree","line":288,"column":0,"depth":2},"disjoint-set-union--dsu--union-find":{"type":"header","text":"Disjoint Set Union = DSU = Union Find","value":"disjoint-set-union--dsu--union-find","line":335,"column":0,"depth":2},"balanced-binary-search-tree":{"type":"header","text":"Balanced binary search tree","value":"balanced-binary-search-tree","line":407,"column":0,"depth":2},"fenwick-tree--bit--binary-index-tree":{"type":"header","text":"Fenwick Tree = BIT = Binary index tree","value":"fenwick-tree--bit--binary-index-tree","line":417,"column":0,"depth":2},"sqrt-decomposition":{"type":"header","text":"Sqrt Decomposition","value":"sqrt-decomposition","line":588,"column":0,"depth":2},"segment-tree":{"type":"header","text":"Segment Tree","value":"segment-tree","line":589,"column":0,"depth":2},"treap":{"type":"header","text":"Treap","value":"treap","line":763,"column":0,"depth":2},"sqrt-tree":{"type":"header","text":"Sqrt Tree","value":"sqrt-tree","line":764,"column":0,"depth":2},"randomized-heap":{"type":"header","text":"Randomized Heap","value":"randomized-heap","line":765,"column":0,"depth":2},"lru-cache":{"type":"header","text":"LRU cache","value":"lru-cache","line":772,"column":0,"depth":2},"lfu-cache":{"type":"header","text":"LFU cache","value":"lfu-cache","line":867,"column":0,"depth":2},"problems-using-sortedlist-sorteddict":{"type":"header","text":"Problems using SortedList, SortedDict","value":"problems-using-sortedlist-sorteddict","line":1032,"column":0,"depth":1}},"children":[],"parent":"7m3gais9ll8mlmzqlw08s7g","data":{}},"body":"<h1 id=\"data-structures\">Data Structures<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-structures\"></a></h1>\n<h1 id=\"fundamentals\">Fundamentals<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fundamentals\"></a></h1>\n<h2 id=\"hash-tables\">Hash Tables<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hash-tables\"></a></h2>\n<p>Tags: Hashing, Open Addressing, Open-Addressing, Chaining</p>\n<p><a href=\"https://leetcode.com/problems/design-hashset/\">Design HashSet</a></p>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># Chaining</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHashSet</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> key<span class=\"token operator\">%</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        i <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        i <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> key <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Open addressing</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHashSet</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">10069</span>\n        self<span class=\"token punctuation\">.</span>hash_table <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> probe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">%</span><span class=\"token number\">1999</span> <span class=\"token operator\">+</span> probe <span class=\"token operator\">+</span> probe<span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>size\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> probe <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>probe<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>hash_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        self<span class=\"token punctuation\">.</span>hash_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> probe <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>probe<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>hash_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>hash_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                <span class=\"token keyword\">break</span>    \n                \n    <span class=\"token keyword\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> probe <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            i  <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> probe<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>hash_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>hash_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        \n        \n</code></pre>\n<h2 id=\"minimum-stack--minimum-queue\">Minimum Stack / Minimum Queue<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#minimum-stack--minimum-queue\"></a></h2>\n<ul>\n<li>monotonic queue, <a href=\"https://leetcode.com/problems/constrained-subsequence-sum/\">p1</a>, the cnt variable below defines the enqueue priority, can have different priority implementations, e.g in max sliding window <a href=\"https://leetcode.com/problems/sliding-window-maximum/\">problem</a> it would be the index of the element</li>\n</ul>\n<p>Queue solves sliding window minimum problem, which means that we should report the smallest value inside each window.</p>\n<p>Stack solves next nearest element problem</p>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Monoqueue</span><span class=\"token punctuation\">(</span>collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># counts the number of elements which value is greater or equal than</span>\n        <span class=\"token keyword\">while</span> self <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> val<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>S<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ans\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> self <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MonoQueue</span><span class=\"token punctuation\">(</span>collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># enqueue dequeu depending on index value, useful when you need monotonic queue used as sliding window</span>\n        <span class=\"token keyword\">while</span> self <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;=</span> num<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;=</span> i<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</details>\n<ul>\n<li><a href=\"https://leetcode.com/problems/max-stack/\">max stack</a></li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxStack</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>del_stack <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>del_heap <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        heappush<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_update_stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>del_heap<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_update_stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">peekMax</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_update_heap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">popMax</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_update_heap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>del_stack<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>heappop<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_update_heap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>heap <span class=\"token keyword\">and</span> <span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>del_heap<span class=\"token punctuation\">:</span>\n            heappop<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">_update_stack</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>stack <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>del_stack<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n</details>\n<ul>\n<li>Most Recently Used Queue <a href=\"https://leetcode.com/problems/design-most-recently-used-queue/\">p</a></li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token comment\"># O(nlogn) initialization, O(logn) fetch</span>\n<span class=\"token keyword\">from</span> sortedcontainers <span class=\"token keyword\">import</span> SortedList\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MRUQueue</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>ls <span class=\"token operator\">=</span> SortedList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> n\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res\n\n\n<span class=\"token comment\"># BIT solutions are hard to come up with?</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BIT</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> index <span class=\"token operator\">&#x3C;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> delta\n            index <span class=\"token operator\">+=</span> index <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>index\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> index<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n            index <span class=\"token operator\">-=</span> index <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>index\n        <span class=\"token keyword\">return</span> res\n\n<span class=\"token comment\"># O(NlogN) initialization, O(log^2n)fetch</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MRUQueue</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit <span class=\"token operator\">=</span> BIT<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>vals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>BIT\n            self<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> n\n    \n    <span class=\"token comment\"># O(log^2n)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        l<span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword\">while</span> l<span class=\"token operator\">&#x3C;</span>r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>r <span class=\"token operator\">>></span> <span class=\"token number\">1</span> \n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> k<span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> m\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">[</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    \n<span class=\"token comment\"># Square root decomposition technique - O(n) init, O(sqrt(n)) fetch</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MRUQueue</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>indecies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n\n        self<span class=\"token punctuation\">.</span>nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">**</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ii <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>self<span class=\"token punctuation\">.</span>nn\n            <span class=\"token keyword\">if</span> ii <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>indecies<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        i <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_bs<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>indecies<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>indecies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> ii <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>indecies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>indecies<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            \n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>indecies<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>indecies<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            \n        <span class=\"token keyword\">return</span> res\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">_bs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        l<span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> l<span class=\"token operator\">&#x3C;</span>r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>r<span class=\"token operator\">>></span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> m\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> l\n</code></pre>\n</details>\n<ul>\n<li><a href=\"https://leetcode.com/problems/number-of-visible-people-in-a-queue/\">heights queue</a></li>\n</ul>\n<h2 id=\"sparse-table\">Sparse Table<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sparse-table\"></a></h2>\n<h1 id=\"trees\">Trees<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#trees\"></a></h1>\n<h2 id=\"trie---prefix-tree\">Trie - Prefix tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#trie---prefix-tree\"></a></h2>\n<p>in a list of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> words <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>w</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>w</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_{1},w_{2}, ... w_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> we check if the word t is a prefix of any of these words</p>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(len(t))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span></span></span></span></span> look up</li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(len(w))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">))</span></span></span></span></span> for insert</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>Trie<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>is_end <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self\n        <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span>\n        node<span class=\"token punctuation\">.</span>is_end <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self\n        <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> ch <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">:</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                 <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>is_end\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self\n        <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> prefix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> ch <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">:</span>\n                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                 <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        \n\n\n<span class=\"token comment\"># Your Trie object will be instantiated and called as such:</span>\n<span class=\"token comment\"># obj = Trie()</span>\n<span class=\"token comment\"># obj.insert(word)</span>\n<span class=\"token comment\"># param_2 = obj.search(word)</span>\n<span class=\"token comment\"># param_3 = obj.startsWith(prefix)</span>\n</code></pre>\n<h2 id=\"disjoint-set-union--dsu--union-find\">Disjoint Set Union = DSU = Union Find<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#disjoint-set-union--dsu--union-find\"></a></h2>\n<ul>\n<li>Complexity:</li>\n<li>If we make <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span> requestis to the union method it would take</li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mi>l</mi><mi>p</mi><mi>h</mi><mi>a</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(alpha(N))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">lp</span><span class=\"mord mathnormal\">ha</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">))</span></span></span></span></span> amortised time per ops and alpha is the Inverse-Ackermann function. This is approximately constant</li>\n<li>To perform a sequence of m addition, union, or find operations on a disjoint-set forest with n nodes requires total time</li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>α</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(mα(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span>, where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">α(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span> is the extremely slow-growing inverse Ackermann function.</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DSU</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># path compression</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># keep tree's rank small</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n            self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n</code></pre>\n</details>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DSU</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> x <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n            self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token comment\"># path compression</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># keep tree's rank small</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n            self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n</code></pre>\n</details>\n<ul>\n<li><a href=\"https://leetcode.com/problems/number-of-good-paths/\">Google onsite question</a></li>\n</ul>\n<h2 id=\"balanced-binary-search-tree\">Balanced binary search tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#balanced-binary-search-tree\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">from</span> sortedcontainers <span class=\"token keyword\">import</span> SortedList\n</code></pre>\n<p><a class=\"color-tag\" style=\"--tag-color: #90e4c1;\" href=\"/dendron-wiki/notes/yee0akilojq0gnoske9jphs\">#Zadachi</a></p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/data-stream-as-disjoint-intervals/\">Data Stream as Disjoint Intervals</a></li>\n<li><a href=\"https://leetcode.com/problems/closest-room/\">Closest Room</a></li>\n<li><a href=\"https://cses.fi/problemset/task/1163/\">Traffic lights</a></li>\n<li><a href=\"https://usaco.guide/problems/cses-1632-movie-festival-ii/solution\">Movie Festiva</a></li>\n</ul>\n<h2 id=\"fenwick-tree--bit--binary-index-tree\">Fenwick Tree = BIT = Binary index tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fenwick-tree--bit--binary-index-tree\"></a></h2>\n<ul>\n<li>light weight BIT</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BIT</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''adds val to nums[i]'''</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> val\n            i <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''sum(nums[:i+1])'''</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> i<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            i <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">sum_range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''sum(nums[l:r+1])'''</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</details>\n<ul>\n<li>\n<p>BIT, 1D, <a href=\"https://leetcode.com/problems/range-sum-query-mutable/\">problem</a>, <a href=\"https://leetcode.com/problems/count-of-smaller-numbers-after-self/?envType=study-plan&#x26;id=algorithm-iii\">problem</a></p>\n</li>\n<li>\n<p>supports cumulutaive computations only on functions which have inverse like sum</p>\n</li>\n<li>\n<p>min function has limited support. cannot do min_range(i,j) and also whenever you do an update the new value should be smaller than the old one</p>\n</li>\n<li>\n<p>BIT needs functions which form a <strong>group</strong>, such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span></span> with operator + </p>\n</li>\n<li>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span></span> and min form a semi-ring and that is not enough. </p>\n</li>\n<li>\n<p>A Fenwick tree can support the following range operations:</p>\n<ul>\n<li>Point Update and Range Query (classical one with implementation below)</li>\n<li>Range Update and Point Query (initialize to 0-s, range update = update(l,x), update(r+1,-x), query(l) becomes a point query. Cumulative sum trick)</li>\n<li>Range Update and Range Query <a href=\"https://cp-algorithms.com/data_structures/fenwick.html#2-range-update-and-point-query\">math trick using two BIT-s</a></li>\n</ul>\n</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BIT</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>nums <span class=\"token operator\">=</span> nums\n        self<span class=\"token punctuation\">.</span>bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        diff <span class=\"token operator\">=</span> val<span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> diff\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> diff\n            i <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''sum nums[:i+1] '''</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> i<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            i <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sum_range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NumArray</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit <span class=\"token operator\">=</span> BIT<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sumRange</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>sum_range<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span>\n\n</code></pre>\n</details>\n<ul>\n<li>BIT, Fenwick Tree, Binary Index Tree, 2D, <a href=\"https://leetcode.com/problems/range-sum-query-2d-mutable/\">problem</a></li>\n<li>think BIT on x axis, then recursively create another BIT on Y axis.</li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log(n) log(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span> for updates and queries. Linear initialization is a bit tricky.</li>\n<li>nesting loops in update and query methods</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BIT</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>nums <span class=\"token operator\">=</span> mat\n        self<span class=\"token punctuation\">.</span>bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        \n        <span class=\"token comment\"># build O(n*m*logn*logm)</span>\n        <span class=\"token comment\"># self.mat = [[0]*len(mat[0]) for _ in range(len(mat))]</span>\n        <span class=\"token comment\"># self.bit = [[0]*(len(mat[0])+1) for _ in range(len(mat)+1)]</span>\n        <span class=\"token comment\"># for i in range(len(mat)):</span>\n        <span class=\"token comment\">#     for j in range(len(mat[0])):</span>\n        <span class=\"token comment\">#         self.update(i,j,mat[i][j])   </span>\n        \n        <span class=\"token comment\"># build O(m*n), order of loops matter</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> mat<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        \n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&#x26;</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        diff <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> diff\n        i<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            jj <span class=\"token operator\">=</span> j\n            <span class=\"token keyword\">while</span> jj <span class=\"token operator\">&#x3C;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>jj<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> diff\n                jj <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>jj <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>jj<span class=\"token punctuation\">)</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        res<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> i<span class=\"token punctuation\">:</span>\n            jj <span class=\"token operator\">=</span> j\n            <span class=\"token keyword\">while</span> jj<span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>jj<span class=\"token punctuation\">]</span>\n                jj <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>jj <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>jj<span class=\"token punctuation\">)</span>\n            i <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sum_range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NumMatrix</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mat<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit <span class=\"token operator\">=</span> BIT<span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sumRegion</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>sum_range<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n\n</code></pre>\n</details>\n<h2 id=\"sqrt-decomposition\">Sqrt Decomposition<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sqrt-decomposition\"></a></h2>\n<h2 id=\"segment-tree\">Segment Tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#segment-tree\"></a></h2>\n<ul>\n<li>\n<p><a href=\"https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/\">Increments on subarrays</a></p>\n</li>\n<li>\n<p>Questions: <a href=\"https://leetcode.com/problems/falling-squares/\">Falling Squares</a>, <a href=\"https://leetcode.com/problems/the-skyline-problem/\">Skyline</a></p>\n</li>\n<li>\n<p>Segment Tree recursive, slower than iterative 2,3 times in practice</p>\n</li>\n<li>\n<p>below is <strong>point update, range query</strong> - both <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span></p>\n</li>\n<li>\n<p>query can be sum, max, gcd. lcd etc (as long as it is a semi-ring)</p>\n</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SegmentTree</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> update_fn<span class=\"token punctuation\">,</span> query_fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''\n        for summation tree: query_fn = update_fn = lambda x,y: x+y \n        works if these two with the space of the values form a semi-ring\n        '''</span>\n        self<span class=\"token punctuation\">.</span>UF<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>QF <span class=\"token operator\">=</span> update_fn<span class=\"token punctuation\">,</span> query_fn\n        self<span class=\"token punctuation\">.</span>T <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0]*4*n</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''\n        v is the index of the node (we use 1-indexing, as v has children 2v, 2(v+1))\n        (v,tl,tr) is root node, e.g. (1,0,n-1)\n        The tree nodes are represented using the index v and INCLUSIVE intervals [tl,tr]\n        Updates SINGLE value at position pos by coposing delta with UF (e.g. adding delta)\n        '''</span>\n        <span class=\"token keyword\">if</span> tl <span class=\"token operator\">==</span> tr<span class=\"token punctuation\">:</span> \n            self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>UF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">+</span> tr<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> pos <span class=\"token operator\">&#x3C;=</span> tm<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>QF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''\n        (v,tl,tr) is root node, e.g. (1,0,n-1)\n        returns QF[l:r+1], e.g. sum(nums[l:l+r]) if QF = lambda x,y: x+y \n        '''</span>        \n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">></span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">==</span> tl <span class=\"token keyword\">and</span> r <span class=\"token operator\">==</span> tr<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n        tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">+</span> tr<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>QF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nst <span class=\"token operator\">=</span> SegmentTree<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span>\n</code></pre>\n</details>\n<ul>\n<li>Segment tree with <strong>range update, range query</strong> - both <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></span></li>\n<li>lazy update to have query in <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span></li>\n<li>in both segment trees if you have been given array <code>nums</code> in advance you can do build in <code>__init__</code> in <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span> time (recursively)</li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SegmentTree</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> update_fn<span class=\"token punctuation\">,</span> query_fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>UF<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>QF <span class=\"token operator\">=</span> update_fn<span class=\"token punctuation\">,</span> query_fn\n        self<span class=\"token punctuation\">.</span>T <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># [0] * (4*N)</span>\n        self<span class=\"token punctuation\">.</span>L <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># [0] * (4*N), keep info for whole segment when making range updates</span>\n \n    <span class=\"token comment\"># lazy propagation</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> u <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>UF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>UF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''changes nums[l,r+1]'''</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">></span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">==</span> tl <span class=\"token keyword\">and</span> r <span class=\"token operator\">==</span> tr<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>UF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>UF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">+</span> tr<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>QF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''max(nums[l:r+1])'''</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">></span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inf\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">==</span> tl <span class=\"token keyword\">and</span> tr <span class=\"token operator\">==</span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">+</span> tr<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>QF<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n</details>\n<p><strong>Assignment on segments</strong></p>\n<p>Suppose now that the modification query asks to assign each element of a certain segment <code>a[l...r]</code> to some value <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span>.</p>\n<ul>\n<li>\n<p>store at each vertex of the Segment Tree whether the corresponding segment is covered entirely with the same value or not. Augment the segment tree with <code>self.marked = defaultdict(bool)</code></p>\n</li>\n<li>\n<p>\"lazy\" update: instead of changing all segments in the tree that cover the query segment, we only change some, and leave others unchanged. </p>\n</li>\n<li>\n<p>A marked vertex will mean, that every element of the corresponding segment is assigned to that value, and actually also the complete subtree should only contain this value.</p>\n</li>\n</ul>\n<p>Small problem: assume you do <code>update(0,n-1)</code> and you keep info only in the root. Then you do a second <code>update(0,n//2)</code>. the info in the root is irrelevant as half of the values are with one value and the other half with another.</p>\n<p>The way to solve this is to push the information of the root to its children and then do the second update.</p>\n<ul>\n<li>Question: <a href=\"https://leetcode.com/problems/range-module/\">Range module</a></li>\n</ul>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SegmentTree</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>T <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># [0] * (4*N) takes values 0 or 1 whether segment is covered or not</span>\n        self<span class=\"token punctuation\">.</span>marked <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token comment\"># lazy propagation</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>marked<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> u <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>marked<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            self<span class=\"token punctuation\">.</span>marked<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''changes nums[l,r+1]'''</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">></span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">==</span> tl <span class=\"token keyword\">and</span> r <span class=\"token operator\">==</span> tr<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> h\n            self<span class=\"token punctuation\">.</span>marked<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">+</span> tr<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">></span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">==</span> tl <span class=\"token keyword\">and</span> tr <span class=\"token operator\">==</span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">+</span> tr<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> tm<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RangeModule</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sl <span class=\"token operator\">=</span> SegmentTree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">9</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">queryRange</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">removeRange</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</details>\n<h2 id=\"treap\">Treap<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#treap\"></a></h2>\n<h2 id=\"sqrt-tree\">Sqrt Tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sqrt-tree\"></a></h2>\n<h2 id=\"randomized-heap\">Randomized Heap<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#randomized-heap\"></a></h2>\n<p>Advanced\nDeleting from a data structure in O(T(n) log n)</p>\n<h2 id=\"lru-cache\">LRU cache<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lru-cache\"></a></h2>\n<p><code>LRUCache(int capacity)</code> Initialize the LRU cache with positive size <code>capacity</code>.</p>\n<p><code>int get(int key)</code> Return the value of the key if the key exists, otherwise return -1.</p>\n<p><code>void put(int key, int value)</code> Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If reach capacity <strong>evict</strong> the least recently used key.</p>\n<p><strong>Algorithm:</strong></p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/lru-cache\">LRU</a></li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> amortised for put and get</li>\n<li>use hashmap to map keys to nodes (nodes has key, val, prev and next)</li>\n<li>use Dlink (represented below as <code>self.head</code> and <code>self.tail</code>) to track least recently used element (it would be at the tail)</li>\n</ul>\n<p><code>__init__</code></p>\n<pre class=\"language-python\"><code class=\"language-Python\">self<span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nself<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> cap\nself<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>get(key)</code></p>\n<ol>\n<li>if key not in cache return -1</li>\n<li>else: update(key) </li>\n<li>return <code>self.cache[key].val</code></li>\n</ol>\n<p><code>put(key,val)</code></p>\n<ol>\n<li>if key in cache: update(key) and change the val</li>\n<li>else: \n<ul>\n<li>if cache is full: evict()</li>\n<li>add(key,val)</li>\n</ul>\n</li>\n</ol>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> prev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cap<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> cap\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>cap<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>evict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">evict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span>a\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">)</span>\n</code></pre>\n</details>\n<h2 id=\"lfu-cache\">LFU cache<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lfu-cache\"></a></h2>\n<p><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</p>\n<p><code>int get(int key)</code> Gets the value of the key if the key exists in the cache. Otherwise, returns -1.</p>\n<p><code>void put(int key, int value)</code> Update the value of the key if present, or inserts the key if not already present. If reach capacity <strong>evict</strong> least frequently used. Ties are resolved using least recently used. (LFU,LRU)</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/lfu-cache/\">LFU</a></li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span> amortised for put and get</li>\n<li>idea: for every frequency create a doubly linked list (LRU idea)</li>\n</ul>\n<p><strong>Algorithm:</strong></p>\n<p><code>get(key)</code></p>\n<ol>\n<li>query the node by calling self._node[key]</li>\n<li>find the frequency by checking node.freq, assigned as f, and query the DLinkedList that this node is in, through calling self._freq[f]</li>\n<li>pop this node</li>\n<li>update node's frequence, append the node to the new DLinkedList with frequency f+1</li>\n<li>if the DLinkedList is empty and self._minfreq == f, update self._minfreq to f+1.</li>\n<li>return node.val</li>\n</ol>\n<p><code>put(key, value)</code></p>\n<ol>\n<li>If key is already in cache, do the same thing as get(key), and update node.val as value</li>\n<li>Otherwise:\n<ul>\n<li>if the cache is full, pop the least frequenly used element (*)</li>\n<li>add new node to self._node</li>\n<li>add new node to self._freq[1]</li>\n<li>reset self._minfreq to 1</li>\n</ul>\n</li>\n</ol>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> prev<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val  \n        self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">=</span> freq\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev    \n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n        \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DLink</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span>a\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>tail\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LFUCache</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cap<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> cap\n        self<span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>DLink<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>min_freq <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>cap<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>evict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>min_freq <span class=\"token operator\">==</span> node<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>min_freq <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        node<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node\n        self<span class=\"token punctuation\">.</span>min_freq <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">evict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>min_freq<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>prev\n        self<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>min_freq<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span>\n</code></pre>\n</details>\n<p>Additionally, you can implement a dynamic balanced binary tree <code>SortedList()</code> solution by adding the notion of frequency and time. get and put would be <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>.</p>\n<details>\n<summary> <b>CODE</b> </summary>\n<pre class=\"language-python\"><code class=\"language-Python\"><span class=\"token keyword\">from</span> sortedcontainers <span class=\"token keyword\">import</span> SortedList\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LFUCache</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> capacity\n        self<span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>sl <span class=\"token operator\">=</span> SortedList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [counter,time,key,value]</span>\n        self<span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        el <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>_increase_count<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>time <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># print(self.sl, self.cache)</span>\n        <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span>\n        old_freq <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">:</span>\n            old_freq <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>_delete<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>    \n            \n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>cap<span class=\"token punctuation\">:</span>\n            el <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n            \n        el <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>old_freq<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> el\n        self<span class=\"token punctuation\">.</span>_add<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>        \n        self<span class=\"token punctuation\">.</span>time <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">_add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">_delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">_increase_count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        new_el <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n        new_el<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        new_el<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>time\n        new_el <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>new_el<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sl<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>new_el<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>new_el<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_el \n</code></pre>\n</details>\n<h1 id=\"problems-using-sortedlist-sorteddict\">Problems using SortedList, SortedDict<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#problems-using-sortedlist-sorteddict\"></a></h1>\n<ul>\n<li><a href=\"/dendron-wiki/\"></a></li>\n</ul>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1744237493819,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"ea936af1aea818f3052610daac103a63","links":[],"anchors":{},"children":["dgcsvcwea8scgdegrk9tfni","xig93vo47ou1bkr7s4w1wb2","ro9bbyftsutm88mxw6r16p5","ypia1zmywsklpicmcgrzlz1","w7iitlako61ppm27mym400a","6bx5plramu4hksomqc1n55z","4nki3bedlvs3mnkixj3a07k","9r5ym61dkwap92fvbte1jkq","849u97nrsuyekmr4a1r92ux","2b5bwf46z6v132wu7xghvrp","dygp5h2vzw4mkromwmofynb","7h50s7ga5ziiyblmoctsqmw","pglaolxcge4xfvgoph3je89","uy9u1co5ih1fokind8tg0eq","jc23ggp8iiu92kpnzo721to","f1u2a47guuw70olv36bzf66","c1bs7wsjfbhb0zipaywqv1","2av385tcj2cbumxprsauff3","v77wdzobzcackzimz6a7crv"],"parent":null,"data":{},"body":"\nWelcome to my Knowledge Base! Here I write about my perception of life, document exciting things I've learned, debate (with myself) on controversial topics. If you know me you will not be surprised to find out that I write mostly about engineering and maths. Other topics I'm interested in are economics, politics, business, chess and poker."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/dendron-wiki","siteUrl":"https://ngocuong0105.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","ga":{"tracking":"G-W5DRRLQ1N7"},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}